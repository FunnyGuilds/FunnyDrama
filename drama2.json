{
  "name": "drama.funnyguilds.net",
  "nodes": [
    {
      "parameters": {},
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [
        -1488,
        -752
      ],
      "id": "f54a016a-11cb-4dd8-9906-9f372e2075ef"
    },
    {
      "parameters": {
        "triggerTimes": {
          "item": [
            {
              "hour": 0
            }
          ]
        }
      },
      "name": "Cron",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [
        -1488,
        -560
      ],
      "id": "47a7c1ed-6bd1-43f9-aae0-2d38f02e99fa"
    },
    {
      "parameters": {
        "url": "https://raw.githubusercontent.com/FunnyGuilds/FunnyDrama/master/data/elements.json",
        "options": {}
      },
      "name": "Fetch elements.json",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -1040,
        -752
      ],
      "id": "9eaacbec-ad22-4efb-b1a6-c0facbdb9a3b"
    },
    {
      "parameters": {
        "url": "https://raw.githubusercontent.com/FunnyGuilds/FunnyDrama/master/data/sentences.json",
        "options": {}
      },
      "name": "Fetch sentences.json",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -816,
        -752
      ],
      "id": "4babfbef-099c-4ae4-9d69-17f0996075ce"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4.1",
          "mode": "list",
          "cachedResultName": "GPT-4.1"
        },
        "messages": {
          "values": [
            {
              "content": "=Generate a **single-sentence** fictional drama with a blunt, chaotic tone, prioritizing the chat history for inspiration.\n\nCurrent time: {{ (new Date()).toLocaleTimeString() }}\n\n#### **INPUT SOURCES (PRIORITY ORDER)**\n1. **CHAT HISTORY (PRIMARY SOURCE)**\n\n### #main CHANNEL\n{{\n$json.main\n  .map(it => `<${it.author} (${it.ago} ago)> ${it.content}`)\n  .join('\\n')\n}}\n\n### #help CHANNEL\n{{\n$json.help\n  .map(it => `<${it.author} (${it.ago} ago)> ${it.content}`)\n  .join('\\n')\n}}\n\n2. **FALLBACK EXAMPLES (ONLY IF CHAT IS BORING)**\n{{\n$json.dramas\n  .map(drama => `- ${drama}`)\n  .join('\\n')\n}}\n\n- **Scan for:** Fights, dumb takes, panic, or confusion.\n- **If multiple candidates:** Pick only the **stupidest/clusterfuck-iest one**.\n- **Only use ONE element** (e.g., \"config system is broken\" → ignore linked drama like \"x is sleeping again\").\n\n#### **RULES (NON-NEGOTIABLE)**\n1. **ONE TOPIC PER SENTENCE** – No \"and\", \"also\", or list-like drama.\n   - **BAD:** *\"Kamilkime hates DDD, CI is dead, and the PM ghosted us.\"*\n   - **GOOD:** *\"Kamilkime just deleted the ‘forge’ module screaming ‘YOLO’.\"*\n\n2. **CHAOS MULTIPLIER** – Escalate the chosen topic with:\n   - **Sabotage** (e.g., \"rewrote prod SQL in emojis\").\n   - **Public meltdowns** (e.g., \"screamed into the dzikoysk’s DMs\").\n   - **Absurd lies** (e.g., \"deployed a forkbomb to ‘test resilience’\").\n\n3. **STYLE:** {{ $json.dramaStyle }}\n\n#### **OUTPUT FORMAT**\n1. **ISOLATE** one stupid/angry/confused moment from chat/examples.\n2. **NUKE IT** with invented chaos.\n3. **OUTPUT:** *DevOps ‘fixed’ the database by rm -rf / and blamed it on a cosmic ray.*"
            }
          ]
        },
        "simplify": false,
        "options": {
          "maxTokens": 200
        }
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -144,
        -656
      ],
      "id": "e5c291bb-c336-4adb-a8c5-6e482facc784",
      "name": "Generate drama (OpenAI)",
      "alwaysOutputData": false,
      "executeOnce": true,
      "credentials": {
        "openAiApi": {
          "id": "gJAu5OoGfege6BTG",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "webhook",
        "options": {},
        "embeds": {
          "values": [
            {
              "inputMethod": "json",
              "json": "={\n  \"title\": \"Latest Drama News\",\n  \"description\": {{ $json.content.toJsonString() }},\n  \"footer\": {\n    \"text\": \"${{ $json.cost || 0 }} ({{ $json.tokens.input }}t in, {{ $json.tokens.output }}t out)\"\n  },\n  \"color\": 16723502\n}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        480,
        -656
      ],
      "id": "619cea78-eb85-459b-926d-535aa12638ae",
      "name": "Dispatch webhook",
      "webhookId": "92762ff1-c901-48c8-bc62-e2e1e32218d8",
      "credentials": {
        "discordWebhookApi": {
          "id": "LWGbdU34VUZYaFf1",
          "name": "Discord Webhook account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// noinspection PointlessBitwiseExpressionJS\n\nconst sentences = $(\"Fetch sentences.json\").first().json;\nconst elements = $(\"Fetch elements.json\").first().json;\nconst fieldPattern = /\\[(?<name>[a-zA-Z0-9_]+)\\]/;\n\nconst alreadyUsed = [];\n\nconst createDrama = () => {\n\n  let sentence = sentences[Math.random() * sentences.length | 0];\n  let matcher;\n  \n  while ((matcher = fieldPattern.exec(sentence)) !== null) {\n  \n      const fieldFull = matcher[0];\n      const fieldType = matcher[1];\n  \n      if (!(fieldType in elements)) {\n          return {sentence: `Unknown element type: ${fieldType}`}\n      }\n  \n      let randomValue;\n      do {\n          randomValue = elements[fieldType][Math.random() * elements[fieldType].length | 0];\n      }\n      while (randomValue in alreadyUsed);\n  \n      alreadyUsed.push(randomValue);\n      sentence = sentence.replace(fieldFull, randomValue);\n  }\n\n  return sentence;\n}\n\nreturn {\n  json: {\n    dramas: Array.from({ length: 10 }, createDrama)\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -592,
        -752
      ],
      "id": "673517b5-0719-4b20-b8c5-1c78dc3e507a",
      "name": "Generate Drama",
      "executeOnce": false
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "88a8a7a9-3bb8-4adc-b0b6-79c7552db592",
              "name": "content",
              "value": "={{ $json.choices[0].message.content }}",
              "type": "string"
            },
            {
              "id": "090620a9-bb2f-4ac2-9f3d-a8d5749449fb",
              "name": "cost",
              "value": "={{ \n  (\n    (\n      ($json.usage.prompt_tokens - $json.usage.prompt_tokens_details.cached_tokens) * 2 + \n      $json.usage.prompt_tokens_details.cached_tokens * 0.5 + \n      $json.usage.completion_tokens * 8\n    ) / 1_000_000\n  )\n}}",
              "type": "number"
            },
            {
              "id": "f22b148a-93fa-436c-851d-38a7c11368b1",
              "name": "tokens",
              "value": "={\ninput: {{ $json.usage.prompt_tokens }},\ncached: {{ $json.usage.prompt_tokens_details.cached_tokens }},\noutput: {{ $json.usage.completion_tokens }}\n}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        256,
        -656
      ],
      "id": "0b11af05-0902-4aa7-9a69-fb9bd90e0529",
      "name": "Extract AI Drama"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "return {json: {\n  dramaStyle: $json[Math.floor(Math.random() * $json.length)]\n}};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -592,
        -944
      ],
      "id": "91a5ec4b-1489-46c4-bd4e-c80eba423c64",
      "name": "Generate Style",
      "alwaysOutputData": true,
      "executeOnce": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "ceb5604b-05ff-404b-807b-dbf538f8d6f2",
              "name": "time",
              "value": "={{ $json.timestamp }}",
              "type": "string"
            },
            {
              "id": "c426a597-710b-440c-9d70-9e2cecf50746",
              "name": "author",
              "value": "={{ $json.author.global_name }}",
              "type": "string"
            },
            {
              "id": "4d4cbf0d-874a-4ac8-ae95-06ca4fe516e5",
              "name": "content",
              "value": "={{ $json.content }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -816,
        -368
      ],
      "id": "c4903c99-97e5-4078-ba9a-ce10114054fa",
      "name": "Simplify #help Messages"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "ceb5604b-05ff-404b-807b-dbf538f8d6f2",
              "name": "time",
              "value": "={{ $json.timestamp }}",
              "type": "string"
            },
            {
              "id": "c426a597-710b-440c-9d70-9e2cecf50746",
              "name": "author",
              "value": "={{ $json.author.global_name || `${$json.author.username} (BOT)` }}",
              "type": "string"
            },
            {
              "id": "4d4cbf0d-874a-4ac8-ae95-06ca4fe516e5",
              "name": "content",
              "value": "={{ $json.content }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -816,
        -560
      ],
      "id": "07698297-c4ee-4bf2-adad-cda7becb9629",
      "name": "Simplify #main Messages"
    },
    {
      "parameters": {
        "jsCode": "const filterContent = (text, maxLength = 200) => {\n  const cleaned = text.replace(/[\\r\\n]+/g, '<br>');\n  return cleaned.length > maxLength\n    ? cleaned.slice(0, maxLength - 3) + '...'\n    : cleaned;\n};\n\nconst getAgo = (time) => {\n  const diff = new Date() - new Date(time);\n  const hours = Math.floor(diff / (1000 * 60 * 60));\n  const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\n  return {hours, minutes};\n}\n\nconst lines = [];\n\nfor (const item of $input.all().reverse()) {\n  const { time, author, content } = item.json;\n  if (author == null || content == null || content == \"\") {\n    continue;\n  }\n  const { hours, minutes } = getAgo(time);\n  if (hours >= 24) {\n    continue;\n  }\n  const filtered = filterContent(content);\n  lines.push({\n    ago: `${hours}h${minutes}m`,\n    author: author,\n    content: filtered\n  })\n}\n\nreturn [{\n  json: {main: lines}\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -592,
        -560
      ],
      "id": "21aa542d-672c-4aab-977f-8d783ae07c90",
      "name": "Format #main Messages",
      "executeOnce": false
    },
    {
      "parameters": {
        "jsCode": "const filterContent = (text, maxLength = 200) => {\n  const cleaned = text.replace(/[\\r\\n]+/g, '<br>');\n  return cleaned.length > maxLength\n    ? cleaned.slice(0, maxLength - 3) + '...'\n    : cleaned;\n};\n\nconst getAgo = (time) => {\n  const diff = new Date() - new Date(time);\n  const hours = Math.floor(diff / (1000 * 60 * 60));\n  const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\n  return {hours, minutes};\n}\n\nconst lines = [];\n\nfor (const item of $input.all().reverse()) {\n  const { time, author, content } = item.json;\n  if (author == null || content == null || content == \"\") {\n    continue;\n  }\n  const { hours, minutes } = getAgo(time);\n  if (hours >= 24) {\n    continue;\n  }\n  const filtered = filterContent(content);\n  lines.push({\n    ago: `${hours}h${minutes}m`,\n    author: author,\n    content: filtered\n  })\n}\n\nreturn [{\n  json: {help: lines}\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -592,
        -368
      ],
      "id": "557157d9-ab86-4558-b0d3-b4460ec09b69",
      "name": "Format #help Messages",
      "executeOnce": false
    },
    {
      "parameters": {
        "resource": "message",
        "operation": "getAll",
        "guildId": {
          "__rl": true,
          "value": "254623242914889729",
          "mode": "list",
          "cachedResultName": "🐰 BunnyKitty 🐰",
          "cachedResultUrl": "https://discord.com/channels/254623242914889729"
        },
        "channelId": {
          "__rl": true,
          "value": "826950650410958920",
          "mode": "list",
          "cachedResultName": "main",
          "cachedResultUrl": "https://discord.com/channels/254623242914889729/826950650410958920"
        },
        "limit": 50,
        "options": {
          "simplify": true
        }
      },
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        -1040,
        -560
      ],
      "id": "3d94074c-1b39-4d99-8e75-9177504f1ca8",
      "name": "Get #main Messages",
      "webhookId": "fd9ea0f0-2d69-4764-a5f8-a01866629ea5",
      "credentials": {
        "discordBotApi": {
          "id": "ng2YWjEby2jmXzo7",
          "name": "Discord Bot account"
        }
      }
    },
    {
      "parameters": {
        "resource": "message",
        "operation": "getAll",
        "guildId": {
          "__rl": true,
          "value": "254623242914889729",
          "mode": "list",
          "cachedResultName": "🐰 BunnyKitty 🐰",
          "cachedResultUrl": "https://discord.com/channels/254623242914889729"
        },
        "channelId": {
          "__rl": true,
          "value": "278157499851341825",
          "mode": "list",
          "cachedResultName": "help",
          "cachedResultUrl": "https://discord.com/channels/254623242914889729/278157499851341825"
        },
        "limit": 50,
        "options": {
          "simplify": true
        }
      },
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        -1040,
        -368
      ],
      "id": "727e8c33-7cd6-4f48-912f-cc3beeedaf6f",
      "name": "Get #help Messages",
      "webhookId": "fd9ea0f0-2d69-4764-a5f8-a01866629ea5",
      "credentials": {
        "discordBotApi": {
          "id": "ng2YWjEby2jmXzo7",
          "name": "Discord Bot account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -1264,
        -656
      ],
      "id": "191253b1-92e9-4334-9ddd-e0299d7ae80e",
      "name": "No Operation, do nothing"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "numberInputs": 4,
        "options": {
          "includeUnpaired": true
        }
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -368,
        -688
      ],
      "id": "c8e7e69d-724c-4422-b388-d31d02089483",
      "name": "Merge"
    },
    {
      "parameters": {
        "url": "https://raw.githubusercontent.com/FunnyGuilds/FunnyDrama/master/data/styles.json",
        "options": {}
      },
      "name": "Fetch styles.json",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -816,
        -944
      ],
      "id": "930ae89a-5898-4b52-b3d3-146d91a0c889"
    },
    {
      "parameters": {
        "content": "# By Sandræ :3\nMade with ignorance and prayers.",
        "height": 96,
        "width": 256
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        320,
        -352
      ],
      "id": "82296f85-167e-443a-a7d5-f23d75f7f74f",
      "name": "Sticky Note"
    }
  ],
  "pinData": {},
  "connections": {
    "Start": {
      "main": [
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cron": {
      "main": [
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch elements.json": {
      "main": [
        [
          {
            "node": "Fetch sentences.json",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch sentences.json": {
      "main": [
        [
          {
            "node": "Generate Drama",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate drama (OpenAI)": {
      "main": [
        [
          {
            "node": "Extract AI Drama",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Drama": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Extract AI Drama": {
      "main": [
        [
          {
            "node": "Dispatch webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Style": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simplify #main Messages": {
      "main": [
        [
          {
            "node": "Format #main Messages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format #main Messages": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Simplify #help Messages": {
      "main": [
        [
          {
            "node": "Format #help Messages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format #help Messages": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 3
          }
        ]
      ]
    },
    "Get #main Messages": {
      "main": [
        [
          {
            "node": "Simplify #main Messages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get #help Messages": {
      "main": [
        [
          {
            "node": "Simplify #help Messages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No Operation, do nothing": {
      "main": [
        [
          {
            "node": "Get #help Messages",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get #main Messages",
            "type": "main",
            "index": 0
          },
          {
            "node": "Fetch elements.json",
            "type": "main",
            "index": 0
          },
          {
            "node": "Fetch styles.json",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Generate drama (OpenAI)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch styles.json": {
      "main": [
        [
          {
            "node": "Generate Style",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "saveDataSuccessExecution": "none"
  },
  "versionId": "f81e5d7f-27e5-4142-a800-6d0b84ae54a6",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "772de366ee37d38fecf1632867a4a1a33b48224bf1f5e46d10b281fe6aeb4c19"
  },
  "id": "34",
  "tags": []
}
