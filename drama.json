{
    "name": "drama.funnyguilds.net",
    "nodes": [
        {
            "parameters": {},
            "name": "Start",
            "type": "n8n-nodes-base.start",
            "typeVersion": 1,
            "position": [
                -760,
                160
            ]
        },
        {
            "parameters": {
                "triggerTimes": {
                    "item": [
                        {
                            "hour": 0
                        }
                    ]
                }
            },
            "name": "Cron",
            "type": "n8n-nodes-base.cron",
            "typeVersion": 1,
            "position": [
                -760,
                320
            ]
        },
        {
            "parameters": {
                "url": "https://raw.githubusercontent.com/FunnyGuilds/FunnyDrama/master/data/elements.json",
                "options": {}
            },
            "name": "Fetch elements.json",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
                -560,
                240
            ]
        },
        {
            "parameters": {
                "url": "https://raw.githubusercontent.com/FunnyGuilds/FunnyDrama/master/data/sentences.json",
                "options": {}
            },
            "name": "Fetch sentences.json",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 1,
            "position": [
                -360,
                240
            ]
        },
        {
            "parameters": {
                "functionCode": "// noinspection PointlessBitwiseExpressionJS\n\nconst sentences = $node[\"Fetch sentences.json\"].json;\nconst elements = $node[\"Fetch elements.json\"].json;\nconst fieldPattern = /\\[(?<name>[a-zA-Z0-9_]+)\\]/;\n\nconst alreadyUsed = [];\nlet sentence = sentences[Math.random() * sentences.length | 0];\nlet matcher;\n\nwhile ((matcher = fieldPattern.exec(sentence)) !== null) {\n\n    const fieldFull = matcher[0];\n    const fieldType = matcher[1];\n\n    if (!(fieldType in elements)) {\n        return {sentence: `Unknown element type: ${fieldType}`}\n    }\n\n    let randomValue;\n    do {\n        randomValue = elements[fieldType][Math.random() * elements[fieldType].length | 0];\n    }\n    while (randomValue in alreadyUsed);\n\n    alreadyUsed.push(randomValue);\n    sentence = sentence.replace(fieldFull, randomValue);\n}\n\nreturn {sentence};\n"
            },
            "name": "Generate drama",
            "type": "n8n-nodes-base.function",
            "typeVersion": 1,
            "position": [
                -160,
                240
            ]
        },
        {
            "parameters": {
                "webhookUri": "WEBHOOK_URL",
                "text": "=",
                "options": {
                    "embeds": "=[{\n\t\"title\": \"Latest Drama News\",\n\t\"description\": {{JSON.stringify($node['Generate drama'].json['sentence'])}},\n\t\"color\": 16723502\n}]"
                }
            },
            "name": "Dispatch webhook",
            "type": "n8n-nodes-base.discord",
            "typeVersion": 1,
            "position": [
                40,
                240
            ]
        }
    ],
    "connections": {
        "Fetch elements.json": {
            "main": [
                [
                    {
                        "node": "Fetch sentences.json",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Start": {
            "main": [
                [
                    {
                        "node": "Fetch elements.json",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Cron": {
            "main": [
                [
                    {
                        "node": "Fetch elements.json",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Fetch sentences.json": {
            "main": [
                [
                    {
                        "node": "Generate drama",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Generate drama": {
            "main": [
                [
                    {
                        "node": "Dispatch webhook",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        }
    },
    "active": true,
    "settings": {},
    "id": 1
}